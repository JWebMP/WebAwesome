package com.jwebmp.webawesome.components.text;

import com.jwebmp.core.base.html.DivSimple;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class FormatDate extends DivSimple<FormatDate>
{
    /**
     * Specifies the format for displaying the weekday (e.g., full name, short, or narrow format).
     */
    private WaWeekdayFormat weekdayFormat;

    /**
     * Specifies the format for displaying the era (e.g., "AD" or "BC").
     */
    private WaWeekdayFormat eraFormat;

    /**
     * Represents the format of the year (e.g., numeric or two-digit format).
     */
    private WaTwoDigitFormat year;

    /**
     * Represents the format of the month (e.g., numeric, two-digit, short, long, or narrow format).
     */
    private WaMonthFormat month;

    /**
     * Specifies the format of the day (e.g., numeric or two-digit format).
     */
    private WaTwoDigitFormat day;

    /**
     * Represents the format of the hour (e.g., numeric or two-digit format).
     */
    private WaTwoDigitFormat hour;

    /**
     * Specifies the format of the minute (e.g., numeric or two-digit format).
     */
    private WaTwoDigitFormat minute;

    /**
     * Represents the format of the second (e.g., numeric or two-digit format).
     */
    private WaTwoDigitFormat second;

    /**
     * Indicates the naming convention for the timezone (e.g., short, long, etc.).
     */
    private WaTimezoneNameFormat timezoneNameFormat;

    /**
     * Represents the specific timezone (e.g., "UTC", "PST").
     */
    private String timezone;

    /**
     * Specifies the convention for the hour format (e.g., 12-hour or 24-hour format).
     */
    private WaHourFormat hourFormat;

    /**
     * Default constructor for the FormatDate component.
     * Sets the tag to "wa-format-date" to identify the HTML element generated by this component.
     */
    public FormatDate()
    {
        setTag("wa-format-date");
    }

    /**
     * Initializes the component attributes based on the assigned field values.
     * Adds attributes to the custom HTML element during rendering.
     * This method ensures the component is not re-initialized if already initialized.
     */
    @Override

    protected void init()
    /**
     * Dynamically sets the required attributes if the corresponding format
     * fields (e.g., weekday, era, year, etc.) are provided.
     */
    {
        if (!isInitialized())
        {
            if (weekdayFormat != null)
            {
                addAttribute("weekday-format", weekdayFormat.toString().toLowerCase());
            }
            if (eraFormat != null)
            {
                addAttribute("era-format", eraFormat.toString().toLowerCase());
            }
            if (year != null)
            {
                switch (year)
                {
                    case Numeric -> addAttribute("year", "numeric");
                    case TwoDigit -> addAttribute("year", "2-digit");
                }
            }
            if (month != null)
            {
                switch (month)
                {
                    case Numeric -> addAttribute("month", "numeric");
                    case TwoDigit -> addAttribute("month", "2-digit");
                    case Short -> addAttribute("month", "short");
                    case Long -> addAttribute("month", "long");
                    case Narrow -> addAttribute("month", "narrow");
                }
            }
            if (day != null)
            {
                switch (day)
                {
                    case Numeric -> addAttribute("day", "numeric");
                    case TwoDigit -> addAttribute("day", "2-digit");
                }
            }
            if (hour != null)
            {
                switch (hour)
                {
                    case Numeric -> addAttribute("hour", "numeric");
                    case TwoDigit -> addAttribute("hour", "2-digit");
                }
            }
            if (minute != null)
            {
                switch (minute)
                {
                    case Numeric -> addAttribute("minute", "numeric");
                    case TwoDigit -> addAttribute("minute", "2-digit");
                }
            }
            if (second != null)
            {
                switch (second)
                {
                    case Numeric -> addAttribute("second", "numeric");
                    case TwoDigit -> addAttribute("second", "2-digit");
                }
            }
            if (timezoneNameFormat != null)
            {
                addAttribute("timezone-name", timezoneNameFormat.toString().toLowerCase());
            }
            if (hourFormat != null)
            {
                addAttribute("hour-format", hourFormat.toString().toLowerCase());
            }
        }
        super.init();
    }

}
